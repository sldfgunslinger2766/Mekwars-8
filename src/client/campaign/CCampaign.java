/*
 * MekWars - Copyright (C) 2004 
 * 
 * Derived from MegaMekNET (http://www.sourceforge.net/projects/megamek)
 * Original author Helge Richter (McWizard)
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 */

package client.campaign;

import java.io.File;
import java.util.StringTokenizer;
import java.util.TreeMap;

import common.BMEquipment;

import client.MWClient;
import client.gui.CCommPanel;
import client.gui.dialog.ArmyViewerDialog;

/**
 * Class for Campaign object used by Client
 * TODO: Rewrite command decoding. Its crazy right now.
 * TODO: Properly comment this class.
 */
public class CCampaign {
	
	MWClient mwclient;
	CPlayer Player;
	TreeMap<Integer,CBMUnit> BlackMarket = new TreeMap<Integer,CBMUnit>();
	TreeMap<String,BMEquipment> BlackMarketParts = new TreeMap<String, BMEquipment>();
	
	public CCampaign(MWClient client) {
		mwclient = client;
		Player = new CPlayer(mwclient);
		File f = new File(MWClient.CAMPAIGN_PATH);
		if (f.exists() && !f.isDirectory()) {f.delete();}
		if (!f.exists()) {
			try {f.mkdirs();}
			catch (Exception e) {MWClient.mwClientLog.clientErrLog(e);}
		}
	}
	
	public boolean decodeCommand(String command) {
		StringTokenizer ST;
		String element;
		
		ST = new StringTokenizer(command, "|");
		element = ST.nextToken();
		/*    if (!element.equals("CC")) {return(false);}
		 element = ST.nextToken();*/
		command = command.substring(3);
		
		if (element.equals("PS")) {
			if (!Player.setData(command)) {
				mwclient.addToChat("Player data load failed!<br>");
				return(false);
			}
			return(true);
		}
		
		if (element.equals("CC")) // Campaign Command
		{
			String commandid = ST.nextToken();
			if (commandid.equals("AT")) {//incoming attack
				
				if (mwclient.getConfig().isParam("ENABLEATTACKSOUND"))
					mwclient.doPlaySound(mwclient.getConfigParam("SOUNDONATTACK"));
				
				mwclient.addToChat("<font color=\"red\"><b>Your forces are under attack!</b></font>", CCommPanel.CHANNEL_HMAIL);
				mwclient.addToChat("<font color=\"red\"><b>Your forces are under attack!</b></font>", CCommPanel.CHANNEL_PMAIL,"Server");
				if (mwclient.getConfig().isParam("POPUPONATTACK")) {
                    int opID = Integer.parseInt(ST.nextToken());
                    int teams = Integer.parseInt(ST.nextToken());
                    //mwclient.showInfoWindow("Your forces are under attack!");
                    new ArmyViewerDialog(mwclient,null,ST,ArmyViewerDialog.AVD_DEFEND,null,null,opID,teams);
				}
			}
			if (commandid.equals("NT")) {//next tick
				
				int time = Integer.parseInt(ST.nextToken());
				boolean decrement = Boolean.parseBoolean(ST.nextToken());
				mwclient.processTick(time);
				
				/*
				 * Decrements tick counters for units without explicit auction
				 * length being sent from the server to save a bit of bandwidth.
				 */
				if (decrement) {
					for (CBMUnit currUnit : BlackMarket.values())
						currUnit.decrementSalesTicks();
					mwclient.refreshGUI(MWClient.REFRESH_BMPANEL);
				}
			}
			return (true);
		}
		if (element.equals("CA"))
		{
			if (!setData(command))
			{
				mwclient.addToChat("<b>Error: Campaign data load failed.</b><br>");
				return(false);
			}
			return(true);
		}
		if (element.equals("PL"))
		{
			if (!Player.decodeCommand(command))
			{
				mwclient.addToChat("<b>Error: Player data load failed.</b><br>");
				return(false);
			}
			return(true);
		}
		if (element.equals("MS"))
		{
			if (!showMsg(command))
			{
				mwclient.addToChat("<b>Error: Message show failed.</b><br>");
				return(false);
			}
			return(true);
		}
		if (element.equals("ST"))
		{
			if (!showStatus(command))
			{
				mwclient.addToChat("<b>Error: Status show failed.</b><br>");
				return(false);
			}
			return(true);
		}
		
		mwclient.addToChat("<b>Error: Wrong campaign command from server.</b><br>");
		return(false);
	}
	
	protected boolean setData(String command) {
		return(true);
	}
	
	/**
	 * Method that reads data generated by Market2.getAutoMarketStatus()
	 * on the server. All data for all BM units sent at once. "|" used
	 * to seperate units, * used to seperate fields inside each unit.
	 */
	public void setBMData(String command) {
		
		//create tokenizer
		StringTokenizer mainTokenizer = new StringTokenizer(command, "$");
		
		//clear all current BM data
		BlackMarket.clear();
		
		while(mainTokenizer.hasMoreTokens()) {
			CBMUnit currBMUnit = new CBMUnit(mainTokenizer.nextToken(), this);
			BlackMarket.put(currBMUnit.getAuctionID(), currBMUnit);
		}
	}
	
	/**
	 * Method that removes a unit from the Client's BM representation.
	 */
	public void removeBMUnit(String command) {
		BlackMarket.remove(Integer.valueOf(command));
	}
	
	/** 
	 * Method that adds a unit to the client's BM representation.
	 */
	public void addBMUnit(String command) {
		CBMUnit bmUnit = new CBMUnit(command, this);
		BlackMarket.put(bmUnit.getAuctionID(), bmUnit);
	}
	
	/**
	 * Method that repaces a CBMUnit. Called after a player bids
	 * on a unit in order to change colors and show amount.
	 */
	public void changeBMUnit(String command) {
		CBMUnit bmUnit = new CBMUnit(command, this);
		BlackMarket.remove(bmUnit.getAuctionID());
		BlackMarket.put(bmUnit.getAuctionID(), bmUnit);
	}
	
	protected boolean showMsg(String command) {
		return(true);
	}
	
	protected boolean showStatus(String command) {
		mwclient.addToChat(command);
		return(true);
	}
	
	//public MWClient getClient() {return mwclient;}
	public void setPlayer(CPlayer tplayer) {Player = tplayer;}
	public CPlayer getPlayer() {return Player;}
	public TreeMap<Integer,CBMUnit> getBlackMarket() {return BlackMarket;}
	
	public TreeMap<String,BMEquipment> getBlackMarketParts() { return BlackMarketParts; }
}